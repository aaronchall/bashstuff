echo $SP1
SP1="command prompt"
type # determine how shell finds command
file # classifies file based on content
date # displays date and time
alias # manage command shortcuts
unalias
sort # sorts contents of file (by line?)
uniq # print out unique lines in a sorted file
comm # print common line in pair of sorted files
ptx # produce permuted indexes
sleep # go to sleep for seconds
strings # display printable strings from a binary file
time # time a command

cat -v # flag shows viewable chars

cat foo bar | head -2
cat foo bar | tail -2

more # h gives help
less

# lpr mostly replaced by CUPS (which has web interface), but here's commands
lpr # print to default printer, can pipe and redirect into
lpr -MyPrinterName foofile
lpq # view print queue
lprm 14 # remove job 14
lpq -MyPrinterName
lpc # view print system stats

cut # cuts fields out of file, whitespace delimited default or other char with -d, 
tail /etc/passwd | cut -d: -f1,5 # f flag followed by list or range by dash for just those fields
cut -c1-3 # cut by char position, here chars 1,2,3 from the file

tr 'a-z' 'A-Z' < foo.file  # translate lower to upper
cat foofile | tr -dc 'aeiou\n' # -d will delete chars -dc will delete complements
wc foofile # word count of file, -l line count, -c char count, -w word count, default is all (-lwc)

grep word foofile # looks for "word" in file, returns line
grep -i word foofile # ignore case
grep '[aeiou]' foofile # look for lines with a vowel in them
grep 'a[^n]' foofile # look for lines with a not followed by n
grep 'a.*e' foofile # a must be followed by e with 0 or more other chars in between
grep 'a.a' foofile # two a's with any char between
grep '^a' foofile # a at beginning of line
grep 'a$' foofile # a at end of line, ^ and & lose this meaning at other places in regex

sort -r foofile # reverse sorts
sort -f foofile # ignore case (default is uppercases first)
sort foofile foofile2 # can sort more than one at a time
sort -t: -k2 foofile # using : as delimeter, sort by 2nd field, can numeric sort with -n
tsort # topological sort utility

cmp foofile1 foofile2 # compares files, reports if they differ (nothing if they don't)
cksum foofile1 foofile2

comm foofile1 foofile2 # if files are sorted, can search for common lines
comm -13 foofile1 foofile2 #suppress lines unique to file 1, suppresses lines in both files

diff -c foofile1 foofile2 # shows diff used in rcs and cvs for version control, -c more readable output, -u too
# zcomp, zdiff # utilities to compare compressed files

paste foofile foofile2 foofile3 # concatenate horizontally, joining with tabs
paste -s foofile # joins lines on a single line with tabs
paste -d ':\n' foofile # can control number of columns and delimiters (here, separate alternating by : then \n)

join -t= -12 foofile foofile2 # match fields delimited by = (tab default), here key field for file 1 is field 2
join -t= -12 -o 1.2 2.2 foofile foofile2 # -o flag can supply file.field pairs to output, instead of default 
# here join on second field, and output second field of each file.


multi-user!!!

mail foo@bar.com # enter subject, type message, ctrl-D or single period on lone line to stop, enter CC list
mail # with no commands, opens mailbox and presents list of messages, 
#can type number of message to view, d deletes, q quits

# Mutt is a client based on ELM with ideas from PINE and other freeware email clients
# POP3/IMAP services must be running in Linux for them to work on Outlook, e.g. in Windows shell:
telnet linux_machine_domain_name 143 # tests for IMAP server, exit with ". logout"
telnet linux_machine_domain_name 25 # show if mail server exists and is accessible, exit with "quit"
telnet linux_machine_domain_name 110 # tests for POP3 server, exit with "quit"
# if no response, possible firewall or no service

### Managing Processes ###

ps # show current status of process, no args just shows the ones belonging to the current login session
ps -f # show full information, including parent PID (PPID), starttime (STIME) and user id UID
ps -e # every process, can limit to users (-u) groups (-g) PIDs (-p) and terminal (-t)
ps -u user_a
ps -t tty4
ps -p 17075
ps -fp 17075
# two ways to manage processes: kill, skill and pkill or /proc interface
# signals: ctrl-c sends INT and ctrl-\ sends QUIT, HUP is a modem hangup, 
# kill can only send to own processes, unless superuser (root)
# sending to login shell kill -1 or kill -HUP will cause shell to terminate and log you out
kill # default is 15
kill <pid> # syntax
kill -9 <pid> # KILL
kill -1 <bash PID> # logout, i.e. HUP

# /proc entries
ls -l /proc/<pid>
tr '\0' '\r' < /proc/<pid>/environ # see the environment, translate ascii nulls to LF chars
ls -l /proc/<pid>/fd # file descriptor, see a processes open files (called file handle on some "other" systems)
umount /home # unmount the home file system, can't be done if a file process is open
ls -l /proc/*/fd | grep /home # find all files open in home filesystem

# end command with & to create running job in background
# ctrl-z to stop a running job
jobs # view jobs, '+' current job, '-' next to become current, status, command line used
fg # foreground the current job
^Z # ctrl-z to stop it
bg # background the job while running (like adding & to end)
fg %<n> # specify by job number, kill can use same specification, replacing the %n with the pid
# kill can also send SIGSTOP and SIGCONT

Scheduling
# cron, at, and batch to schedule tasks
# use cron for repetitive tasks
# crontab provides table of cron entries format is:
# min hr day mo dayofwk cmd
# create a new crontab,  
cat > mycron 
4 2 * * * /home/ajax/bin/mybackup
^D
crontab mycron
crontab -l # list the contents
crontab -r # remove the table
crontab -e # edit the table with editor named in editor or visual environment variables
# cron commands are run using the /bin/sh, standard Bourne shell
# output is typically captured and emailed to user, so common to redirect output, e.g.
3 5 * * 1-5 morning_job > /dev/null 2>&1
# shell env not the same as login env, may need to setup own environment including PATH
# at
at 10am tomorrow # schedule one-off job
at> /home/me/bin/reminder # prompt
at> <EOT> #  ctrl-d
# can use now + 3 days, times before current assumed to be tomorrow, days and months as names, 
# now tomorrow, noon, midnight, teatime (4pm) also understood
# batch
# batch is subset of at, defers processing until system load is light enough to continue
# batch waits until load average drops below .8 (busy system may have load average of 4.0+)
# simplest way to defer heavy job

# Logging
# syslog system is admin'd by system log daemon, syslogd
# amount and where controlled by /etc/syslog.conf, on RedHat is /var/log, others /var/adm
# syslog uses two params, facility and priority, syslog, 
# Facilities: http://en.wikipedia.org/wiki/Syslog#Facility_levels, additionally mark used internally
# priority levels of level mentioned and higher will be logged, can override with =
# don't overload system with log files, make sure utiltities like logrotate used to reduce impact of logging
# logs best defence against system instability, all subsystems capable of causing system failure write to logger
# logrotate rotates files to control size, may be requirement to send signal to syslogd or other process re new file
# generally 4 weeks of log files kept
# syslog entries have date, time, name of system, (maybe pid) then actual message
# syslog is network aware and may log to central host, 
# well-behaved applications use syslog facility or log directly to /var/log directory
# syslog writes more important message to /var/log/messages, security to /var/log/secure, mail to /var/log/maillog
# other facilities may use specific files in /var/log like cron, spooler, xferlog (ftp), and boot.log
# Apache stores log files in subdirectory of its installation dir, often linked to /var/log/httpd
# include access_log, error_log, and ssl_request_log, referring sites and CGI errors logs may also be configured
# Samba logs on /var/log/samba, 
# a file for each machine that uses files on the Linux system, 
# and for the two main components smbd (session establishment and control for file and printer sharing) 
#                             and nmbd (name to address mapping)
# many other apps that log, db servers, proxy servers, usenet news servers, know where ones on your system log
# general docs, including setup info, usually in /usr/doc, start with README and INSTALL

# Start with error messages in syslog when looking for why apps fail.
# system may create core file, containing memory image of process (main system memory was originally called core memory) 
# can be used to autopsy dead process
file core # do first to determine what program caused the core and what signal if any initiated core dump
man 7 signal # list signals
strings core | tail # strings displays printable strings from a binary file, 
# at end will be process environment including command used to start program
# can give clues to cause of death, looking for pathnames can give information about config files and shared libs
# System V (not always available)
system status # System V startup scheme frequently used for starting, stopping restarting, and getting status info
# files in /etc/rc.d/init.d or /etc/init.d are startup and shutdown files, 
# each takes single arg: start, stop, restart, status
/etc/rc.d/init.d/httpd status # give a short description fo status
/etc/rc.d/init.d/smb status 
# some apps also support reload and condrestart (conditional restart)

free # shows how much free system memory there is
top # displays process information and system wide information in tabular form

# review man pages for syslog, logger, and chkconfig (for System V), see tldp.org
#####
# Bash
# global startup: /etc/profile, sets PATH, USER, LOGNAME, MAIL, HOSTNAME, and HISTSIZE
# global aliases set in /etc/bashrc
# both affect all users
# next file one of .bash_profile, .bash_login or .profile, first found is executed.
# .bash_profile is user's local profile, and sets environment for user's login session
# after profiles, .bashrc (in user's home dir) runs if exists, 
# it normally calls /etc/bashrc file then gives local directives
# if .bash_logout exists in user's home dir, will be executed on user's logout
# can be used for logging commands, remove temp files, or other cleanup
# Four prompt strings: PS1 PS2 PS3 PS4 (switching to more literal session of $ prompts while discussing prompts)
$ echo $PS1 # show prompt, see next line
$
$ echo $PS2 # PS2 used for further lines of input
>
$ while true
> do
> sleep 2
>
$ echo $PS3 #  prompt for generated menu, next line is literal:
#?
$ echo $PS4 #  used for debugging shell scripts, enabled with -x option to shell, or set -x at start of script
$ set -x
$ echo $?
+ echo 0
0
$ PS4='DBG: '
DGB: PSr=DGB:
$ echo $?
DBG: echo 0
0
$
# if command is within file that is sourced, called, from current shell, 
# first char of PS4 prompt is duplicatedto indicated the indirection
# PS3 and PS4 can be set to any text displayed without change, but PS1 and PS2 can use variable text
# done with $(command) syntax or special chars
# when doing, put entire string in single quotes, double quotes will evaluate before setting var, giving static text
# see http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html

# three main classes of options: 1 readline (in .inputrc), 2 shell running (with set, see examples), 
set completion-ignore-case on
set -o vi
# and 3 extended features use shopt
shopt -s nocaseglob
# .inputrc 
# is startup file for readline (lib handles user input), can contain key mappings, 
# supports macro language for conditional mappings based on editing mode, terminal type, or application name
set key-bindings vi # in .inputrc is equivalent to
set -o vi # in .bashrc
# large numer of options in readline, see info readline or man readline
# set
# supports single char options and verbose, using -o option name syntax, e.g.:
set -a # make all functions and variables exportable
set -o allexport # same
# -n option displays each line as read, doesn't execute (good to catch syntax errors)
# -x displays line as executed, (catch logic errors)
shopt
# for extended shell functionality, uses -s to set variable -u to unset, -q to be quiet
# controls command line history, filename globbing (expansion with metachars) execution of commands, 
# correcting spelling mistakes in dir names, et al
# both set and shopt fully documented in Bash online manual
# useful options set in shell:
# cdspell checks for minor spelling mistakes in directory names when using cd command e.g.
$ mkdir test
$ cd tst # error
$ shopt -s cdspell
$ cd tst
test
$ pwd
$ /home/user/test

# PATH variable is searched when simple command is not found in working dir, if very long, shell can appear slow
# good to keep paths short, be careful not to set PATH in .bashrc expecially if extending normal path, can result in PATH
# becoming longer for each subshell call.
# see tldp.org/LDP/abs/html and tldp.org/HOWTO/Pash-Prompt-HOWTO/


## Linux File System Notes
# Basics
# ext4 supports volumes up to 1 exabyte and file sizes up to 16 terabytes, 
# came with kernel version 21 Oct 2008 Linux 2.6.28
# ext3 current from November 2001 Linux 22.4.15, filesystem size of 32 TB and max file size 2 TB
uname -a # displays information about kernel version

# file system usually consists of superblock (master information table), 
# inodes (list of file summary information, INODE list),
# and data blocks associated with the data

# Every filesystem has root dir, identified by inode number 2. can be used to mount to root filesystem
# mount point is the directory where a new filesystem if attached
# unmount command
# mount command requires special file (e.g. /dev/hda3), mount point (e.g. /user), and optional filesystem type
# normally only superuser can mount or unmount
mount # show filesystems mounted
# /proc is a view inside the kernel; to see filesystem types supported cat /proc/filesystems
# some systems call files data sets and directories folders, collections, or catalogs
# / is root dir
# /bin is for executables
# /lib is for shared libraries
# /home is for user files

# directory is just list of filenames and inode numbers
# inode completely identifies the file, but has no filename so all directory needs is name and number
# ext3 supports up to 255 char filenames, only truly illegal chars are / and ascii nul.
# shell characters should not be used as they can make it difficult to find a file

# a file is a collection of data blocks, ext3 will have 1, 2, 4, or 8. 
# If filesystem has 4k block size, a file of 1 byte length will still occupy 1096 bytes of disk space
# data blocks are not necessarily contiguous
# in Linux everything is a file: a directory, system memory, disks, keyboard, screen, and all system devices 
# can be access using hte same tools and commands as a regular file
# This is the basic philosophy of Linux
# /dev dir's special files link to kernal device driver that uses normal file access methods for communication
# /dev entry looks like any file except it does not have a size. 
# It has a major (id's device driver) and minor (sub-device or operation for the device driver) device number
# two kinds of device drivers: block and character, each with own set of major numbers
# type (b for block, c for raw)
# then permissions, link count, owner, group, major dev number, minor, create date, name e.g.
# brw-rw----  1  root  floppy  2,0  May 6 2010  fd0

# other general purpose devices:
# /dev/null is the bit bucket, discards input
# similar is /dev/zero which does same for writes, but when read returns as many NUL (Hex 00) chars you ask to read
# useful to create zero filled files for testing or database initialization
ls -l /dev/null
cat /dev/null # nothing!
cat /dev/null > x
ls -l x # shows newly created file
dd bs=1 count=5 if=/dev/zero | cat -v # read five bytes from /dev/zero

# fileinfo: type (- is normal file), permissions, link count, owner, group, filesize, create date, name
ls -l # shows:
# -rw-rw----  1  root  floppy  234  May 6 2010  fname
ls -s / # show size in blocks, 
ls -sh / # human readable
ls -i / # show inode numbers
ls -lt / # sort output by modification time, can also sort by access time (-u) and creation time (-c)
ls -r / # reverse order
cp /dev/null localfile
ls # localfile created
cp /dev/null test1
cp /dev/null test2
ls /tmp # nothing!
ls # files created
cp test1 test2 /tmp # copy to /tmp
ls /tmp # copied
ls # originals still there
mv test1 test2 /tmp # move files instead
ls # no longer there
ls /tmp # now here

rm -i localfile # ask for confirmation before deleting
# if used on readonly file, will also ask for confirmation
# can force silence of interaction with -f
# linking allows multiple names to appear for single file
touch test1 test2 test3
ls
ls -l
ls test3 test4 # link test3 to test4
ls -i # show inodes are same for both
cat test3
cat test4
cat > test3
abc
^D
cat test3
cat test4 # has same contents
ln xyz /tmp/xyz
ln -i /bin/mv /bin/cp /bin/ln # ln creates hard links, can't link files to another filesystem because inodes
# mv doesn't physically move data, just updates the source and target dirs, unless on diff filesystems
# which is then same as cp and rm. ln, cp and mv are actually the same program
# Can only create alias for files, not dirs. Source must exist prior to linking
# ls -s can solve both problems, creates symbolic (soft) link, 
# works across filesystems, doesn't check for existence of source file
# can link files to files, files to directories, or directories to directories
# /usr/tmp is an example of symbolic link to /var/tmp dir.
file /usr/tmp # shows symbolic link
ls -l /usr/tmp # shows pointer in info
touch /var/tmp/xx
ls /var/tmp
ls /usr/tmp # same file here
# see also mkfs (make filesystem), tunefs, debugfs, fsck (check and repair filesystem)

# Linux Security
# user id (UID): number id's user to the system, each allocated to a group
# group id (GID): number id's 
# superuser: login name is root, UID is 0, can add users and other admin functions
# daemons: required users with no login that control background processes
# bin, daemon, adm, lp, mail, news are users listed in the user password file, but no valid password, so cannot login
# called privileged users, they typically have similar privileges to root
cat /etc/passwd # text file, colon delimited, has the following schema: 
# loginname, password (x for backward compatibility), UID, GID, comment, homedir, initialshell
# real password kep in more secure file called /etc/shadow
cat /etc/group # has schema:
# groupname, password (typically empty), GID, and optional members
newgrp # command allows user to assume privileges of the new group
# if password field is filled, any user can become a member with the password using newgrp
# (u)ser , (g)roup, (o)ther, rwxrw-r--, (a)ll
ls -al # see 10 char field, first is file type (d for directory, - normal file) e.g. -rw-rrw-r--
ls -l /usr/bin/passwd # other permissions: setuid setgid and sticky bit (text save permissions)
-r-s--x--x   1 root    root    12345 Jul 12  2000 /usr/bin/passwd
ls -l /etc/shadow
-rw-------   1 root    root     1234 May  9  17:12 /etc/shadow
# setuid adn setgid used on executables to raise privilege for duration of execution
# passwd command can write new password to shadow file, (only writable by superuser)
# setuid or setgid bit indicated by appropriate x in ls -l, replaced by s
# sticky bit used to indicate keeping part of executable in memory, now typically done by default
ls -ld /tmp
id # show uid, gid, and groups
# on directory, sticky bit determines who can delete files (only owner can delete)
# so files can be deleted even if can't read write or execute because add or delete file implicitly writes to file's dir
ls -ld safe_dir
ls -l safe_dir
rm safe_dir/xx
rm: cannot unlink 'safe_dir/xx': Permission denied
# permissions controlled by chmod, chgrp and chown
# user can manage perms on files they own, but only superuser can manage perms for other users
# (r)ead, (w)rite, e(x)ecute, (s)et id, s(t)icky, (u)ser, (g)roup, (o)ther, (a)ll, 
# (+) add permission, (-) remove perm, (=) set permissions
# Special, User, Group, Other
# SetUID, SetGID, Sticky, (Read, Write, Execute), (Read, Write, Execute), (Read, Write, Execute)
# 4000, 2000, 1000, 400, 200, 100, 40, 20, 10, 4, 2, 1 octal
ls -l mytest
-rw-r--r--
chmod a-rw mytest # symbolic
ls -l mytest
----------
chmod u+rw mytest
ls -l mytest
-rw-------
chmod go=rw mytest
ls -l mytest
-rw-r--r--
chmod 644 mytest # octal
ls -l mytest
-rw-r--r--
chmod 751 mytest 
ls -l mytest
-rwx-r-x--x
# note symbolic representations are always entered as the set of users + - or = and then the perms set

ls -l myfile
chown myuser myfile # not permitted? only superuser can change file ownership
su # superuser, enter password, note change in prompt
id 
chown myuser myfile
ls -l myfile
exit # exits superuser, prompt reverts
# chown user:group file # syntax, :group is optional
# chgrp group file # syntax to change groups
umask # mask an octal number by subtracting from defaults
# defaults typically 777 for dirs, 666 for files
# umask of 0022 results in 644 perms
# superuser creates a umask for system wide shell initialization in /etc/profile or users .profile or .bashrc
umask 0022 # see session below, prompt is strangely #:
/var/root # umask                                                               
0022                                                                            
/var/root # touch x                                                             
/var/root # ls -l x                                                             
-rw-r--r--    1 root     root             0 May 13 13:36 x                      
/var/root # umask 0002                                                          
/var/root # rm x                                                                
/var/root # touch x                                                             
/var/root # ls -l x                                                             
-rw-rw-r--    1 root     root             0 May 13 13:36 x                      
/var/root # mkdir a                                                             
/var/root # ls -ld a                                        # display perms of directory with -d
drwxrwxr-x    2 root     root            40 May 13 13:36 a                      
/var/root # umask 027                                                           
/var/root # touch y                                                             
/var/root # ls -l y                                                             
-rw-r-----    1 root     root             0 May 13 13:37 y                      
/var/root # mkdir b                                                             
/var/root # ls -ld b                                                            
drwxr-x---    2 root     root            40 May 13 13:37 b                      
# see also yppasswd in the NIS (Network Information Service) system, managing remote passwords
# pam_console for managing permissions on the system consoles
# Internet RequestForComment (RFC) Unified Login with Pluggable Authentication Modules
# www.opengroup.org/tech/rfc/rfc86.0.html



# File System Management includes
# 1. Clean up files
# 2. Check file growth
# 3. Check disk usage
# 4. Do backups
# SA can also  mount and unmount file systems, allocate quotas on file numbers and disk space, 
# and load and unload modules required for specific file system requirements
# ordinary users contribute, less likely to have problems because of SA limits
# clean up files not in use or archive & compress them, don't clutter home dir, 
# use hierarchy to store and retrieve, check for files that are growing, take steps to keep them in check

# utilities can help maintain health

du /tmp # check disk usage
du -s /tmp # summary option
du -sh /tmp # h option is human readable

df -k # amount of disk free, in kilobyte disk blocks
df -h # displays same in human readable
df -i # inodes! (data blocks used on filesystem)
# e.g. if most of disk is used, but not a lot of inodes used, can accomodate a lot of small files!

shred --remove /tmp/sensitive_data # Overwrite old data with patterns
shred -u /tmp/more_sensitive_data

pathchk -p /this_contains_special_chars/?/ # checks for this system by default
# p for portable to other posix compliant systems. message re: nonportable char ?

# find has many options: -amin -anewer, -atime -cmin -cnewer -ctime -empty -false -fstype 
# -gid -group -ilname -iname -inum -ipath -iregex -links -lname -mmin -mtime -name -newer -nouser -nogroup 
# -path -perm -regex -size -true -type -uid -user -xtype -exec -fls -fprint -fprint0 -fprintf 
# -ok -print -print0 -printf -prune -ls () ! -not -o -or -a -and -daystart -depth -follow -help 
# -maxdepth -mindepth -mount -noleaf -version -xdev
find / -user ahall -print
# e.g.
find condition1 -and (condition2 -or condition3)
# use escaped brackets surrounded by spaces to ensure booleans are interpreted correctly
#
find /tmp -type f # find regular files
find /home -type d -user ahall -or -user nhall -print
find /home -type d \( -user ahall -or -user nhall \) -print # without escaped will be an error
# common options are -name (filename) -user (username or UID) -mtime (last modification)
# and -size for size of the file in blocks of 512 bytes
find /home /tmp -user ahall -mtime -1 -size +5 # can search multiple dirs -1 is less than one
find /home /tmp -user ahall -mtime +1 -size +5 # get older +1 is greater than one
find /tmp -newer /last_updated # check compares against /last_updated's modification date
find /tmp -type f -or -mtime -1

# can pipe output of find to xargs to construct required command line or use -exec or -ok options
# use xargs to process large file lists quickly, 
# use -exec or -ok to select files for other find options, not bulk processing
find /tmp -user ahall | xargs ls -l
# achieves the same outcome, must escape semicolon to shell, runs for each file, so slow execution on large lists
find /tmp -user ahall -exec ls -l {} \; # filename will be replaced by {}
find /tmp -exec grep -q 'Report' {} \; -print # grep indicates success by finding pattern in file 
# -q means to be quiet, non-verbose

# backups: cpio and tar for Unix, and zip and unzip, and lha for Windows, dump if portability not an issue
# also gzip and bzip2 for high quality compression at good speed
# tar comes from Tape ARchive, simple command line, also can automatically compress with gzip 
# the tar command does not backup empty dirs not special files, so slightly limited but ideal for user backups
# definitely not for full system backups
# p23 


























